// Code generated by protoc-gen-go.
// source: srvbuilder.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	srvbuilder.proto

It has these top-level messages:
	SetupRequest
	SetupResponse
	BuildEnv
	TeardownRequest
	TeardownResponse
	ExecutionRequest
	ExecutionResponse
	Status
	MetaResult
	BuildResult
	GetResultResponse
	GetResultRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type SetupRequest struct {
}

func (m *SetupRequest) Reset()         { *m = SetupRequest{} }
func (m *SetupRequest) String() string { return proto1.CompactTextString(m) }
func (*SetupRequest) ProtoMessage()    {}

type SetupResponse struct {
	Env *BuildEnv `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
}

func (m *SetupResponse) Reset()         { *m = SetupResponse{} }
func (m *SetupResponse) String() string { return proto1.CompactTextString(m) }
func (*SetupResponse) ProtoMessage()    {}

func (m *SetupResponse) GetEnv() *BuildEnv {
	if m != nil {
		return m.Env
	}
	return nil
}

type BuildEnv struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Contains the signature only known to the slave who created it
	// If it fails to validate request will be denied
	// Signature is calculated with this field set empty
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *BuildEnv) Reset()         { *m = BuildEnv{} }
func (m *BuildEnv) String() string { return proto1.CompactTextString(m) }
func (*BuildEnv) ProtoMessage()    {}

type TeardownRequest struct {
	Env *BuildEnv `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
}

func (m *TeardownRequest) Reset()         { *m = TeardownRequest{} }
func (m *TeardownRequest) String() string { return proto1.CompactTextString(m) }
func (*TeardownRequest) ProtoMessage()    {}

func (m *TeardownRequest) GetEnv() *BuildEnv {
	if m != nil {
		return m.Env
	}
	return nil
}

type TeardownResponse struct {
}

func (m *TeardownResponse) Reset()         { *m = TeardownResponse{} }
func (m *TeardownResponse) String() string { return proto1.CompactTextString(m) }
func (*TeardownResponse) ProtoMessage()    {}

type ExecutionRequest struct {
	Args     []string                `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
	Env      []*ExecutionRequest_Env `protobuf:"bytes,2,rep,name=env" json:"env,omitempty"`
	Stdin    []byte                  `protobuf:"bytes,3,opt,name=stdin,proto3" json:"stdin,omitempty"`
	BuildEnv *BuildEnv               `protobuf:"bytes,4,opt,name=build_env" json:"build_env,omitempty"`
}

func (m *ExecutionRequest) Reset()         { *m = ExecutionRequest{} }
func (m *ExecutionRequest) String() string { return proto1.CompactTextString(m) }
func (*ExecutionRequest) ProtoMessage()    {}

func (m *ExecutionRequest) GetEnv() []*ExecutionRequest_Env {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *ExecutionRequest) GetBuildEnv() *BuildEnv {
	if m != nil {
		return m.BuildEnv
	}
	return nil
}

type ExecutionRequest_Env struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ExecutionRequest_Env) Reset()         { *m = ExecutionRequest_Env{} }
func (m *ExecutionRequest_Env) String() string { return proto1.CompactTextString(m) }
func (*ExecutionRequest_Env) ProtoMessage()    {}

type ExecutionResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Stdout []byte  `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr []byte  `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (m *ExecutionResponse) Reset()         { *m = ExecutionResponse{} }
func (m *ExecutionResponse) String() string { return proto1.CompactTextString(m) }
func (*ExecutionResponse) ProtoMessage()    {}

func (m *ExecutionResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Status struct {
	CoreDump   bool  `protobuf:"varint,1,opt,name=core_dump" json:"core_dump,omitempty"`
	Exited     bool  `protobuf:"varint,2,opt,name=exited" json:"exited,omitempty"`
	ExitStatus int32 `protobuf:"varint,3,opt,name=exit_status" json:"exit_status,omitempty"`
	Signaled   bool  `protobuf:"varint,4,opt,name=signaled" json:"signaled,omitempty"`
	Signal     int32 `protobuf:"varint,5,opt,name=signal" json:"signal,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto1.CompactTextString(m) }
func (*Status) ProtoMessage()    {}

type MetaResult struct {
	JustAFiller string `protobuf:"bytes,1,opt,name=just_a_filler" json:"just_a_filler,omitempty"`
}

func (m *MetaResult) Reset()         { *m = MetaResult{} }
func (m *MetaResult) String() string { return proto1.CompactTextString(m) }
func (*MetaResult) ProtoMessage()    {}

type BuildResult struct {
	Duration      int64          `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	Status        *Status        `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	ChangeRequest *ChangeRequest `protobuf:"bytes,3,opt,name=change_request" json:"change_request,omitempty"`
}

func (m *BuildResult) Reset()         { *m = BuildResult{} }
func (m *BuildResult) String() string { return proto1.CompactTextString(m) }
func (*BuildResult) ProtoMessage()    {}

func (m *BuildResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BuildResult) GetChangeRequest() *ChangeRequest {
	if m != nil {
		return m.ChangeRequest
	}
	return nil
}

type GetResultResponse struct {
	// Key is in sync with result struct
	Key    [][]byte       `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	Result []*BuildResult `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *GetResultResponse) Reset()         { *m = GetResultResponse{} }
func (m *GetResultResponse) String() string { return proto1.CompactTextString(m) }
func (*GetResultResponse) ProtoMessage()    {}

func (m *GetResultResponse) GetResult() []*BuildResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetResultRequest struct {
	Project   string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	KeyPrefix []byte `protobuf:"bytes,2,opt,name=key_prefix,proto3" json:"key_prefix,omitempty"`
}

func (m *GetResultRequest) Reset()         { *m = GetResultRequest{} }
func (m *GetResultRequest) String() string { return proto1.CompactTextString(m) }
func (*GetResultRequest) ProtoMessage()    {}

func init() {
}

// Client API for Builder service

type BuilderClient interface {
	// Sets the build environment up
	Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error)
	// Executes a command
	Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (Builder_ExecuteClient, error)
	// Tears the build environment down
	Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error)
}

type builderClient struct {
	cc *grpc.ClientConn
}

func NewBuilderClient(cc *grpc.ClientConn) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error) {
	out := new(SetupResponse)
	err := grpc.Invoke(ctx, "/proto.Builder/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (Builder_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Builder_serviceDesc.Streams[0], c.cc, "/proto.Builder/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &builderExecuteClient{stream}
	if err := x.ClientStream.SendProto(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Builder_ExecuteClient interface {
	Recv() (*ExecutionResponse, error)
	grpc.ClientStream
}

type builderExecuteClient struct {
	grpc.ClientStream
}

func (x *builderExecuteClient) Recv() (*ExecutionResponse, error) {
	m := new(ExecutionResponse)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *builderClient) Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*TeardownResponse, error) {
	out := new(TeardownResponse)
	err := grpc.Invoke(ctx, "/proto.Builder/Teardown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Builder service

type BuilderServer interface {
	// Sets the build environment up
	Setup(context.Context, *SetupRequest) (*SetupResponse, error)
	// Executes a command
	Execute(*ExecutionRequest, Builder_ExecuteServer) error
	// Tears the build environment down
	Teardown(context.Context, *TeardownRequest) (*TeardownResponse, error)
}

func RegisterBuilderServer(s *grpc.Server, srv BuilderServer) {
	s.RegisterService(&_Builder_serviceDesc, srv)
}

func _Builder_Setup_Handler(srv interface{}, ctx context.Context, buf []byte) (proto1.Message, error) {
	in := new(SetupRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(BuilderServer).Setup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Builder_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionRequest)
	if err := stream.RecvProto(m); err != nil {
		return err
	}
	return srv.(BuilderServer).Execute(m, &builderExecuteServer{stream})
}

type Builder_ExecuteServer interface {
	Send(*ExecutionResponse) error
	grpc.ServerStream
}

type builderExecuteServer struct {
	grpc.ServerStream
}

func (x *builderExecuteServer) Send(m *ExecutionResponse) error {
	return x.ServerStream.SendProto(m)
}

func _Builder_Teardown_Handler(srv interface{}, ctx context.Context, buf []byte) (proto1.Message, error) {
	in := new(TeardownRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(BuilderServer).Teardown(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Builder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Builder_Setup_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _Builder_Teardown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _Builder_Execute_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for Result service

type ResultClient interface {
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error)
}

type resultClient struct {
	cc *grpc.ClientConn
}

func NewResultClient(cc *grpc.ClientConn) ResultClient {
	return &resultClient{cc}
}

func (c *resultClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error) {
	out := new(GetResultResponse)
	err := grpc.Invoke(ctx, "/proto.Result/GetResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Result service

type ResultServer interface {
	GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error)
}

func RegisterResultServer(s *grpc.Server, srv ResultServer) {
	s.RegisterService(&_Result_serviceDesc, srv)
}

func _Result_GetResult_Handler(srv interface{}, ctx context.Context, buf []byte) (proto1.Message, error) {
	in := new(GetResultRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ResultServer).GetResult(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Result_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Result",
	HandlerType: (*ResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResult",
			Handler:    _Result_GetResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
