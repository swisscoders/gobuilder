// Code generated by protoc-gen-go.
// source: proto/builder.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/builder.proto

It has these top-level messages:
	ExecutionRequest
	ExecutionResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type ExecutionRequest struct {
	Args  []string                `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
	Env   []*ExecutionRequest_Env `protobuf:"bytes,2,rep,name=env" json:"env,omitempty"`
	Stdin []byte                  `protobuf:"bytes,3,opt,name=stdin,proto3" json:"stdin,omitempty"`
	Dir   string                  `protobuf:"bytes,4,opt,name=dir" json:"dir,omitempty"`
}

func (m *ExecutionRequest) Reset()         { *m = ExecutionRequest{} }
func (m *ExecutionRequest) String() string { return proto1.CompactTextString(m) }
func (*ExecutionRequest) ProtoMessage()    {}

func (m *ExecutionRequest) GetEnv() []*ExecutionRequest_Env {
	if m != nil {
		return m.Env
	}
	return nil
}

type ExecutionRequest_Env struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ExecutionRequest_Env) Reset()         { *m = ExecutionRequest_Env{} }
func (m *ExecutionRequest_Env) String() string { return proto1.CompactTextString(m) }
func (*ExecutionRequest_Env) ProtoMessage()    {}

type ExecutionResponse struct {
	Status *ExecutionResponse_Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Stdout []byte                    `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr []byte                    `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (m *ExecutionResponse) Reset()         { *m = ExecutionResponse{} }
func (m *ExecutionResponse) String() string { return proto1.CompactTextString(m) }
func (*ExecutionResponse) ProtoMessage()    {}

func (m *ExecutionResponse) GetStatus() *ExecutionResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ExecutionResponse_Status struct {
	CoreDump   bool  `protobuf:"varint,1,opt,name=core_dump" json:"core_dump,omitempty"`
	Exited     bool  `protobuf:"varint,2,opt,name=exited" json:"exited,omitempty"`
	ExitStatus int32 `protobuf:"varint,3,opt,name=exit_status" json:"exit_status,omitempty"`
	Signaled   bool  `protobuf:"varint,4,opt,name=signaled" json:"signaled,omitempty"`
	Signal     int32 `protobuf:"varint,5,opt,name=signal" json:"signal,omitempty"`
}

func (m *ExecutionResponse_Status) Reset()         { *m = ExecutionResponse_Status{} }
func (m *ExecutionResponse_Status) String() string { return proto1.CompactTextString(m) }
func (*ExecutionResponse_Status) ProtoMessage()    {}

func init() {
}

// Client API for Builder service

type BuilderClient interface {
	Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (Builder_ExecuteClient, error)
}

type builderClient struct {
	cc *grpc.ClientConn
}

func NewBuilderClient(cc *grpc.ClientConn) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (Builder_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Builder_serviceDesc.Streams[0], c.cc, "/proto.Builder/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &builderExecuteClient{stream}
	if err := x.ClientStream.SendProto(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Builder_ExecuteClient interface {
	Recv() (*ExecutionResponse, error)
	grpc.ClientStream
}

type builderExecuteClient struct {
	grpc.ClientStream
}

func (x *builderExecuteClient) Recv() (*ExecutionResponse, error) {
	m := new(ExecutionResponse)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Builder service

type BuilderServer interface {
	Execute(*ExecutionRequest, Builder_ExecuteServer) error
}

func RegisterBuilderServer(s *grpc.Server, srv BuilderServer) {
	s.RegisterService(&_Builder_serviceDesc, srv)
}

func _Builder_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionRequest)
	if err := stream.RecvProto(m); err != nil {
		return err
	}
	return srv.(BuilderServer).Execute(m, &builderExecuteServer{stream})
}

type Builder_ExecuteServer interface {
	Send(*ExecutionResponse) error
	grpc.ServerStream
}

type builderExecuteServer struct {
	grpc.ServerStream
}

func (x *builderExecuteServer) Send(m *ExecutionResponse) error {
	return x.ServerStream.SendProto(m)
}

var _Builder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _Builder_Execute_Handler,
			ServerStreams: true,
		},
	},
}
